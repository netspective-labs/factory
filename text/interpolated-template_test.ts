import { testingAsserts as ta } from "./deps-test.ts";
import * as mod from "./interpolated-template.ts";
import * as tw from "./whitespace.ts";
import * as safety from "../safety/mod.ts";

const itCtx = mod.interpolatedTemplateContext("SYNTHETIC", "v0.0.1");

export const preface: mod.SnippetSupplier = (state) => {
  const { indentation, ie: { provenance } } = state;
  // deno-fmt-ignore
  return indentation.unindent(`
    -- Generated by strategy ${state.ic.strategy.identity} version ${state.ic.strategy.version}. DO NOT EDIT.
    -- source: ${provenance.identity} (${provenance.humanReadableSource(provenance)})
    -- version: ${provenance.version}`);
};

export const embeddedPreface: mod.SnippetSupplier = (state) => {
  const { indentation, ie: { provenance } } = state;
  // deno-fmt-ignore
  return indentation.unindent(`
    -- embedded from: ${provenance.identity} (${provenance.humanReadableSource(provenance)})
    -- version: ${provenance.version}`);
};

Deno.test("simple interpolated template without decorations", () => {
  const state = itCtx.prepareState(
    itCtx.prepareTsModuleExecution(import.meta.url),
  );
  const t1 = mod.interpolatedTemplate(itCtx, state)`
    indented test 2+2=${2 + 2}`;
  ta.assert(t1);
  ta.assertEquals("indented test 2+2=4", t1.formatted());
});

Deno.test("template with header snippets and SQL convenience tag", () => {
  // Convenient template tag for local itCtx and state. Sspecial 'SQL' name is
  // used by some VS Code extensions to do syntax highlighting.
  const SQL = (literals: TemplateStringsArray, ...expressions: unknown[]) => {
    return mod.interpolatedTemplate(itCtx, state)(literals, expressions);
  };

  const state = itCtx.prepareState(
    itCtx.prepareTsModuleExecution(import.meta.url, { version: "v1.0.0" }),
    {
      headers: { standalone: [preface] },
    },
  );
  const t1 = SQL`
    SELECT *
      FROM table
     WHERE column = ${2 + 2}`;
  ta.assert(t1);
  ta.assertEquals(
    tw.unindentWhitespace(`
        -- Generated by strategy SYNTHETIC version v0.0.1. DO NOT EDIT.
        -- source: interpolated-template_test.ts (${import.meta.url})
        -- version: v1.0.0

        SELECT *
          FROM table
         WHERE column = 4`),
    t1.formatted(),
  );
});

interface SyntheticBindParam {
  bindIndex?: number;
  value: string | number;
}

interface SyntheticBindParamsSupplier {
  bindParams: SyntheticBindParam[];
}

Deno.test("template with header snippets and SQL convenience tag with type-safe bind params example", () => {
  const bind = (value: string | number, bindIndex?: number) => ({
    value,
    bindIndex,
  });

  // Convenient template tag for local itCtx and state. Sspecial 'SQL' name is
  // used by some VS Code extensions to do syntax highlighting.
  const SQL = (
    literals: TemplateStringsArray,
    ...expressions: unknown[]
  ): mod.InterpolatedTemplateResult & SyntheticBindParamsSupplier => {
    const sbps: SyntheticBindParamsSupplier = { bindParams: [] };
    const isBind = safety.typeGuard<SyntheticBindParam>("bindIndex", "value");
    for (let i = 0; i < expressions.length; i++) {
      const expr = expressions[i];
      if (isBind(expr)) {
        expr.bindIndex = expr.bindIndex ?? sbps.bindParams.length;
        sbps.bindParams.push(expr);
        expressions[i] = "?";
      }
    }
    return {
      ...mod.interpolatedTemplate(itCtx, state)(literals, ...expressions),
      bindParams: sbps.bindParams,
    };
  };

  const state = itCtx.prepareState(
    itCtx.prepareTsModuleExecution(import.meta.url, { version: "v1.0.0" }),
    {
      headers: { standalone: [preface] },
    },
  );
  const t1 = SQL`
    SELECT *
      FROM table
     WHERE column = ${2 + 2} AND column2 = ${bind(3)} AND column3 = ${
    bind("text")
  }`;
  ta.assert(t1);
  ta.assertEquals(
    tw.unindentWhitespace(`
        -- Generated by strategy SYNTHETIC version v0.0.1. DO NOT EDIT.
        -- source: interpolated-template_test.ts (${import.meta.url})
        -- version: v1.0.0

        SELECT *
          FROM table
         WHERE column = 4 AND column2 = ? AND column3 = ?`),
    t1.formatted(),
  );
  ta.assertEquals([3, "text"], t1.bindParams.map((bp) => bp.value));
});

Deno.test("TODO: template with embed and headers", () => {
  const state = itCtx.prepareState(
    itCtx.prepareTsModuleExecution(import.meta.url),
    {
      headers: { standalone: [preface], embedded: [embeddedPreface] },
    },
  );
  const t1 = mod.interpolatedTemplate(itCtx, state)`
      indented test
      {put embedded template here for testing (e.g. mustache, JS template literal, etc.)}`;
  ta.assert(t1);
});
